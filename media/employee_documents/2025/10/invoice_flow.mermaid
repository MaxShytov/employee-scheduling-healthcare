sequenceDiagram
    participant Email as 📧 Email Server
    participant N8N as ⚡ n8n
    participant Django as 🐍 Django API
    participant S3 as ☁️ MinIO/S3
    participant OCR as 👁️ OCR Engine
    participant LLM as 🤖 LLM (Llama 3.1)
    participant DB as 🗄️ PostgreSQL
    participant Bexio as 📊 Bexio API
    participant SMTP as 📧 Email Service
    
    Note over Email,SMTP: 1. ДОКУМЕНТ ПОСТУПАЕТ
    Email->>N8N: New email with attachment
    N8N->>N8N: Extract attachment
    N8N->>S3: Upload PDF/image
    S3-->>N8N: file_path, file_url
    
    N8N->>Django: POST /api/documents/create
    Note right of N8N: {<br/>  file_path,<br/>  email_from,<br/>  email_subject,<br/>  organization_id<br/>}
    
    Django->>DB: Create Document record
    DB-->>Django: document_id, status='new'
    Django-->>N8N: 201 Created {document_id}
    
    Note over Django,LLM: 2. OCR ОБРАБОТКА
    Django->>S3: Download file
    S3-->>Django: file_content
    Django->>OCR: Extract text (Tesseract/Paddle)
    OCR-->>Django: extracted_text, confidence=98%
    
    Django->>DB: Update Document
    Note right of Django: ocr_text,<br/>ocr_confidence,<br/>status='processing'
    
    Note over Django,LLM: 3. AI КЛАССИФИКАЦИЯ
    Django->>LLM: Classify document
    Note right of Django: Prompt:<br/>"Analyze this document.<br/>Type: invoice/bank/contract?<br/>Language: de/fr/en/it?<br/>Extract: amounts, dates, sender"
    
    LLM-->>Django: Classification result
    Note left of LLM: {<br/>  type: "invoice",<br/>  language: "de",<br/>  confidence: 96%,<br/>  extracted: {<br/>    invoice_number: "2024-1156",<br/>    amount: 450.00,<br/>    currency: "CHF",<br/>    supplier: "Swisscom AG",<br/>    date: "2025-10-09"<br/>  }<br/>}
    
    Django->>DB: Update Document
    Note right of Django: document_type='invoice',<br/>ai_confidence=96%,<br/>extracted_data={...},<br/>status='classified'
    
    Note over Django,Bexio: 4. CLIENT MATCHING
    Django->>DB: Search clients by supplier name
    Note right of Django: Fuzzy match: "Swisscom AG"<br/>+ aliases check
    
    alt Client found
        DB-->>Django: client_id, assigned_manager
        Django->>DB: Link document to client
    else Client not found
        Django->>DB: Set requires_manual_review=True
        Django->>SMTP: Notify manager: "New supplier needs review"
    end
    
    Note over Django,Bexio: 5. INVOICE CREATION
    Django->>DB: Create Invoice record
    Note right of Django: Link to Document,<br/>populate from extracted_data,<br/>status='pending'
    
    alt Confidence >= 95% AND Amount < 1000 CHF
        Note over Django: AUTO-APPROVAL RULE MATCHED
        Django->>DB: Update status='approved'
    else Manual approval needed
        Django->>DB: Create ApprovalRequest
        Django->>SMTP: Send approval email to manager
        Note right of SMTP: Email with:<br/>"Approve" button → signed URL<br/>"Decline" button → signed URL
    end
    
    Note over Django,Bexio: 6. SYNC TO BEXIO
    alt Auto-approved OR Manager clicked "Approve"
        Django->>Bexio: POST /api/invoices
        Note right of Django: {<br/>  contact_id,<br/>  invoice_number,<br/>  positions: [...],<br/>  total<br/>}
        
        Bexio-->>Django: 201 Created {invoice_id: 12345}
        
        Django->>DB: Update Invoice
        Note right of Django: accounting_id='12345',<br/>synced_to_accounting=True,<br/>status='synced'
        
        Django->>DB: Create UsageMetric
        Note right of Django: metric_type='integration_sync'
        
        Django->>SMTP: Notify client & manager
        Note right of SMTP: "Invoice processed and synced"<br/>+ PDF attachment<br/>+ link to Bexio
        
    else Manager clicked "Decline"
        Django->>DB: Update status='rejected'
        Django->>SMTP: Notify: "Invoice rejected"
    end
    
    Note over Email,SMTP: 7. AUDIT & METRICS
    Django->>DB: Create AuditLog
    Note right of Django: action='document_processed',<br/>user=manager,<br/>changes={...}
    
    Django->>DB: Increment organization.documents_used_this_month
    
    alt Documents exceeded monthly limit
        Django->>DB: Create UsageMetric (overage)
        Django->>SMTP: Alert: "Monthly limit reached"
    end